/**
 * SPDX-License-Identifier: MPL-2.0
 * Author:  Masahito Hemmi.
 */
package uika806.gui5;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Map.Entry;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import org.slf4j.LoggerFactory;

import uika806.err.UnboundException;
import uika806.fn011.reader.Tokenizer;
import uika806.kernel.VMLogger;
import uika806.kernel.AFn;
import uika806.kernel.BuiltInFuncs;
import uika806.kernel.Values;
import uika806.objects.SSymbol;
import uika806.objects.EndOfFile;

import uika806.port.CodepointLispStream;
import uika806.port.CodepointOutputPortImpl;
import uika806.print.PrinterShared;
import uika806.pico.macro.IMacro;
import uika806.reader.LispReaderFx;
import uika806.small.env.BuiltInFuncsImpl2;
import uika806.syntax.Environ;
import uika806.vm4.Compile5;

import uika806.vm4.Op;
import uika806.vm4.SimpleOpPrettyPrinter;
import uika806.vm4.VM4;
import uika806.vm4.VM4Logger;

public class JPanelV5 extends javax.swing.JPanel {

    private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(JPanelV5.class);

    /**
     * Creates new form JPanelV5
     */
    public JPanelV5() {

        initComponents();

        this.jCheckBox1.setSelected(true);
        this.jCheckBox2.setSelected(true);

        //   this.jTextArea1.setText("(import  (scheme write))");
        this.jTextArea1.setText( SAMPLE6 );
     //   this.jTextArea1.setText("(apply   (lambda (x)  (+ 1 x)) '(10))");

    }

    static final String SAMPLE1 = "(*define (bazoo x)\n"
            + "    (define-syntax   myif\n"
            + "         (syntax-rules ()\n"
            + "            ((myif test exp1 exp2)\n"
            + "             (if  test exp1 exp2))\n"
            + "         )\n"
            + "    )\n"
            + "    (myif  (>= x  0 ) 'plus 'minus    ))";

    static final String SAMPLE2 = "(cond (a 1) \n"
            + "     (else 3 4))";

    static final String SAMPLE3
            = "(case (* 2 3) ((2 3 5 7) (quote prime)) ((1 4 6 8 9) (quote composite))))";

    static final String SAMPLE4 = "(let ((=> #f))  \n"
            + "    (cond (#t => 'ok))))";

    static final String SAMPLE5 = "(letrec ((a 1)  (b 2)  )    \n"
            + "       (list a b) )";

    static final String SAMPLE6 = "(-mexp '(letrec ((a 1)  (b 2)  )    \n"
            + "       (list a b) ))";

    Environ lexEnv;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();
        jCheckBox3 = new javax.swing.JCheckBox();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 680, 146));

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 680, 250));

        jButton1.setText("Eval");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 160, -1, -1));

        jCheckBox1.setText("Compile");
        add(jCheckBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 30, 110, -1));

        jLabel1.setText("jLabel1");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel1.setPreferredSize(new java.awt.Dimension(46, 30));
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 420, 380, -1));

        jLabel2.setText("jLabel2");
        jLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel2.setPreferredSize(new java.awt.Dimension(46, 30));
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 450, 380, -1));

        jCheckBox2.setText("VM");
        add(jCheckBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 60, 90, -1));

        jButton2.setText("Dump");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 250, -1, -1));

        jCheckBox3.setText("VM Log");
        add(jCheckBox3, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 90, 100, -1));
    }// </editor-fold>//GEN-END:initComponents

    // eval button
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try {
            LOG.info("***************************************************");
            String str = jTextArea1.getText();
            LOG.info("str = {}", str);

            CodepointLispStream fr = CodepointLispStream.fromUtf8(str);

            boolean bCompile = jCheckBox1.isSelected();
            boolean runVM = jCheckBox2.isSelected();
            boolean bShowVMLog = jCheckBox3.isSelected();

            Object eof = EndOfFile.INSTANCE;
            for (int i = 0; i < 1; i++) {

                Tokenizer tk = new Tokenizer(fr);
                LispReaderFx reader = new LispReaderFx(tk);
                Object sexp = reader.read(false, eof);
                if (sexp == eof) {
                    break;
                }

                if (bCompile) {

                    //   VMLogger log = new VM4Logger();
                    VMLogger log = null;
                    Compile5 comp = new Compile5(log);

                    Op op = comp.invoke(sexp, Op.HALT, lexEnv);

                    CodepointOutputPortImpl outPort0 = new CodepointOutputPortImpl();
                    SimpleOpPrettyPrinter pp0 = new SimpleOpPrettyPrinter();
                    pp0.printIndentTo(op, outPort0);

                    LOG.info("173) {}", outPort0.getAsString());

                    if (runVM) {
                        DisplayCb done = new DisplayCb();

                        BuiltInFuncsImpl2 bu = new BuiltInFuncsImpl2();
                        Vm4Worker doInVM = new Vm4Worker(op, lexEnv, bu, done, bShowVMLog);
                        doInVM.execute();

                        this.jTextArea2.setText("Running ... , Please wait");
                        this.jLabel1.setText("null");
                        this.jLabel2.setText("null");

                    } else {

                        CodepointOutputPortImpl outPort = new CodepointOutputPortImpl();

                        SimpleOpPrettyPrinter pp = new SimpleOpPrettyPrinter();
                        pp.printIndentTo(op, outPort);

                        this.jTextArea2.setText(outPort.getAsString());
                    }

                } else {
                    workerResult.obj = sexp;
                    new DisplayCb().run();
                }

            }

        } catch (Exception re) {

            LOG.error("Exception", re);
            JOptionPane.showMessageDialog(this, re.getMessage());
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    // Dumpボタン
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        StringBuilder sb = new StringBuilder();

        ArrayList<Entry<SSymbol, Object>> list = new ArrayList<>();
        list.addAll(this.lexEnv.getUnmodifiableMap().entrySet());

        Collections.sort(list, new SymbolsComp());

        list.forEach((e)
                -> sb.append(e.getKey().getReadableName()).append(" = ").append(procString(e.getValue()))
                        .append(" ")
                        .append(macroString(e.getValue()))
                        .append("\n"));

        jTextArea2.setText(sb.toString());
    }//GEN-LAST:event_jButton2ActionPerformed

    String procString(Object proc) {

        if (proc instanceof AFn) {
            AFn afn = (AFn) proc;
            return "<AFn " + afn.getName() + ">";
        }
        return proc.toString();
    }

    String macroString(Object fun) {
        if (fun instanceof IMacro) {
            return "[MACRO]";
        }
        return "";
    }

    class SymbolsComp implements Comparator<Entry<SSymbol, Object>> {

        @Override
        public int compare(Entry<SSymbol, Object> o1, Entry<SSymbol, Object> o2) {

            String s1 = o1.getKey().getReadableName();
            String s2 = o2.getKey().getReadableName();
            return s1.compareTo(s2);
        }
    }

    static class WorkerResult {

        public Object obj;

        long endTime;
    }

    final WorkerResult workerResult = new WorkerResult();

    class DisplayCb implements Runnable {

        @Override
        public void run() {
            Object sexp = workerResult.obj;
            if (sexp != null) {

                if (sexp instanceof Values) {

                    String decoded = decodeValues((Values) sexp);
                    jTextArea2.setText(decoded);

                } else {
                    String str2 = decodeObject(sexp);
                    jTextArea2.setText(str2);
                }

                String clazz = sexp.getClass().getName();
                jLabel1.setText(clazz);

                String sss = sexp.toString();
                jLabel2.setText(sss);
            } else {

                jTextArea2.setText("null");
                jLabel1.setText("null");
                jLabel2.setText("null");
            }
            LOG.info("================= Eval thread end");
        }

        String decodeObject(Object sexp) {

            CodepointOutputPortImpl outPort = new CodepointOutputPortImpl();

            new PrinterShared().prin1(sexp, outPort);

            String str2 = outPort.getAsString();
            return str2;
        }

        String decodeValues(Values v) {

            StringBuilder sb = new StringBuilder();
            sb.append("Values\n");

            int num = v.getNum();
            if (num == 0) {
                sb.append("( empty )");
            } else if (num == 1) {
                sb.append("[1] ");
                sb.append(decodeObject(v.getValue1()));
            } else if (num == 2) {
                sb.append("[1] ");
                sb.append(decodeObject(v.getValue1()));
                sb.append("\n");
                sb.append("[2] ");
                sb.append(decodeObject(v.getValue2()));

            } else if (num == 3) {
                sb.append("[1] ");
                sb.append(decodeObject(v.getValue1()));
                sb.append("\n");
                sb.append("[2] ");
                sb.append(decodeObject(v.getValue2()));
                sb.append("\n");
                sb.append("[3] ");
                sb.append(decodeObject(v.getValue3()));

            } else if (num == 4) {
                sb.append("[1] ");
                sb.append(decodeObject(v.getValue1()));
                sb.append("\n");
                sb.append("[2] ");
                sb.append(decodeObject(v.getValue2()));
                sb.append("\n");
                sb.append("[3] ");
                sb.append(decodeObject(v.getValue3()));
                sb.append("\n");
                sb.append("[4] ");
                sb.append(decodeObject(v.getValue4()));

            }
            return sb.toString();
        }

    }

    public class Vm4Worker extends SwingWorker<Object, Object> {

        Op x;
        Environ e;
        BuiltInFuncs bu;
        final Runnable run;
        long startTime;
        boolean showLog;

        Vm4Worker(Op x, Environ lexEnv, BuiltInFuncs bu, Runnable r, boolean showLog) {

            this.x = x;
            this.e = lexEnv;
            this.bu = bu;
            this.run = r;
            this.showLog = showLog;
        }

        @Override
        protected Object doInBackground() throws Exception {

            startTime = System.currentTimeMillis();
            Object obj = null;
            try {
                VMLogger logger = (showLog) ? new VM4Logger() : null;

                VM4 vm = new VM4(x, e, logger, bu);

                obj = vm.exec();
            } catch (UnboundException ue) {
                loggingEnviron(ue);
                obj = ue;

            } catch (RuntimeException re) {
                LOG.warn("catch:", re);
                obj = re;
            }
            return obj;
        }

        @Override
        protected void done() {
            try {
                workerResult.obj = get();
                workerResult.endTime = System.currentTimeMillis();

                LOG.info("------------- done {} mills", (workerResult.endTime - startTime));

                if (this.run != null) {
                    SwingUtilities.invokeLater(run);
                }
            } catch (Exception ex) {
                LOG.error("----------------- Exception in SwingWorker", ex);
            }
        }

        void loggingEnviron(UnboundException ue) {

            LOG.error("337) #############   Unbound : {}", ue.getSymbol().getReadableName());

            Environ environ = ue.getEnviron();
            while (environ.getParent() != null) {

//                LOG.error("Env : {}"  , environ.getUnmodifiableMap()  );
                LOG.error("env = {}", environ.printEnv());
                LOG.error("------------------------");
                environ = environ.getParent();
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
